# /*
#  * Copyright (c) 2021 Software AG, Darmstadt, Germany and/or its licensors
#  *
#  * SPDX-License-Identifier: Apache-2.0
#  *
#  *   Licensed under the Apache License, Version 2.0 (the "License");
#  *   you may not use this file except in compliance with the License.
#  *   You may obtain a copy of the License at
#  *
#  *       http://www.apache.org/licenses/LICENSE-2.0
#  *
#  *   Unless required by applicable law or agreed to in writing, software
#  *   distributed under the License is distributed on an "AS IS" BASIS,
#  *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#  *   See the License for the specific language governing permissions and
#  *   limitations under the License.
#  *
#  */
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "common.names.fullname" . }}
  labels:
    {{- include "common.labels.standard" . | nindent 4 }}
    {{- with .Values.extraLabels -}}
    {{ toYaml . | nindent 4 }}
    {{- end }}
    {{- with .Values.apigw.extraLabels -}}
    {{ toYaml . | nindent 4 }}
    {{- end }}
spec:
  {{- if not .Values.autoscaling.enabled }}
  replicas: {{ .Values.replicaCount }}
  {{- end }}
  selector:
    matchLabels:
      {{- include "common.labels.matchLabels" . | nindent 6 }}
  template:
    metadata:
      annotations:
        {{- with .Values.podAnnotations }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
        {{- include "common.prometheus.annotations" (dict "port" .Values.prometheus.port "scrape" .Values.prometheus.scrape "path" .Values.prometheus.path "scheme" .Values.prometheus.scheme) | nindent 8 }}
        checksum/config: {{ include (print $.Template.BasePath "/configmap.yaml") . | sha256sum }}
      labels:
        {{- include "common.labels.matchLabels" . | nindent 8 }}
        {{- with .Values.extraLabels -}}
        {{ toYaml . | nindent 8 }}
        {{- end }}
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- if .Values.serviceAccount.create }}
      serviceAccountName: {{ include "common.names.serviceAccountName" . }}
      {{- end }}      
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      initContainers:
        {{- if .Values.elasticsearch.deploy }} 
        - name: waitforelasticsearch
          image: {{ .Values.global.curlImage }}
          imagePullPolicy: IfNotPresent
          resources:
            {{- toYaml .Values.resources.apigwInitContainer | nindent 12 }}
          securityContext:
            {{- toYaml .Values.apigwInitContainerSecurityContext | nindent 12 }}
          envFrom:
            - secretRef:
                name: {{ include "apigateway.elasticsecret" . }}
          command:
            - sh
            - -ec
            - |
              {{- $esSvc := ( include "apigateway.elasticservice" . ) }}
              {{- $esHost := printf "%s://%s:%s" (ternary "https" "http" .Values.elasticsearch.tlsEnabled ) $esSvc ( .Values.global.elasticsearch.port | toString) }}
              host="{{ $esHost }}"
              until $(curl --output /dev/null --silent --head --fail -k -u "$username:$password" "$host"  )  ; do
                echo 'Checking if Elasticsearch server is up'
                sleep 5
                counter=$((counter+1))
              done
              # First wait for ES to start...
              response=$(curl -k -u "$username:$password" "$host")
              until [ "$response" = "200" ]  ; do
                response=$(curl --write-out %{http_code} --silent --output /dev/null -k -u "$username:$password" "$host")
                >&2 echo "Elasticsearch is up but unavailable - No Reponse - sleeping"
                sleep 10
              done
              # next wait for ES status to turn to green or yellow
              health="$(curl -fsSL -k -u "$username:$password" "$host/_cat/health?h=status")"
              health="$(echo "$health" | sed -r 's/^[[:space:]]+|[[:space:]]+$//g')" # trim whitespace (otherwise we'll have "green ")
              until [ "$health" = 'yellow'  ] || [ "$health" = 'green'  ]  ; do
                health="$(curl -fsSL -k -u "$username:$password" "$host/_cat/health?h=status")"
                health="$(echo "$health" | sed -r 's/^[[:space:]]+|[[:space:]]+$//g')"
                >&2 echo "Elasticsearch status is not green or yellow - sleeping"
                sleep 10
              done
              echo "Elasticsearch is up and running. Status was: $health"
        {{ end }}
        {{-  if .Values.extraInitContainers }}
        {{- toYaml .Values.extraInitContainers | nindent 8 }}
        {{- end }}
      containers:
        - name: {{ .Chart.Name }}
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          env:
          - name: SAG_IS_CONFIG_PROPERTIES
            value: {{ .Values.apigw.sagIsConfigProperties }}
          {{- include "common.metering.envs" . | nindent 10 }}
          - name: apigw_wrapper_java_initmemory
            value: {{ .Values.apigw.initMemory | quote }}
          - name: apigw_wrapper_java_maxmemory
            value: {{ .Values.apigw.maxMemory | quote }}
          - name: ADMINISTRATOR_PASSWORD
            valueFrom:
              secretKeyRef:
                name: {{ include "apigateway.adminsecretName" . }}
                key: {{ include "apigateway.adminsecretKey" . }}
          - name: apigw_elasticsearch_http_password
            valueFrom:
              secretKeyRef:
                name: {{ include "apigateway.elasticsecretName" . }}
                key: {{ include "apigateway.elasticsecretPasswordKey" . }}
          - name: apigw_elasticsearch_http_username
            valueFrom:
              secretKeyRef:
                name: {{ include "apigateway.elasticsecretName" . }}
                key: {{ include "apigateway.elasticsecretUserKey" . }}
          - name: apigw_elasticsearch_https_keystorePassword
            valueFrom:
              secretKeyRef:
                name: {{ include "apigateway.elastickeystoresecret" . }}
                key: password     
          - name: apigw_elasticsearch_https_truststorePassword
            valueFrom:
              secretKeyRef:
                name: {{ include "apigateway.elastickeystoresecret" . }}
                key: password
          {{- if .Values.extraEnvs }}
          {{- toYaml .Values.extraEnvs | nindent 10 }}
          {{- end }}
          ports:
          - containerPort: {{ int .Values.apigw.runtimePort }}
            name: rt-port
            protocol: TCP
          - containerPort: {{ int .Values.apigw.diagPort }}
            name: diag-port
            protocol: TCP
          - containerPort: {{ int .Values.apigw.uiPort }}
            name: ui-http
            protocol: TCP
          - containerPort: {{ int .Values.apigw.adminPort }}
            name: admin-http
            protocol: TCP
          - containerPort: {{ int .Values.apigw.runtimeExternalPort }} 
            name: external-http
            protocol: TCP
          {{- if .Values.extraPorts }}
          {{- toYaml .Values.extraPorts | nindent 10 }}
          {{- end }}                  
          livenessProbe:
            tcpSocket:
              port: {{ int .Values.apigw.adminPort }}
            failureThreshold: 3
            initialDelaySeconds: 120
            periodSeconds: 30
            successThreshold: 1
            timeoutSeconds: 1
            
          readinessProbe:
            httpGet:
              path: /rest/apigateway/health
              port: {{ int .Values.apigw.adminPort }}
              scheme: {{ .Values.apigw.readinessProbe.scheme }} 
            failureThreshold: 3
            initialDelaySeconds: 30
            periodSeconds: 30
            successThreshold: 1
            timeoutSeconds: 1
          resources:
            {{- toYaml .Values.resources.apigwContainer | nindent 12 }}
          volumeMounts:
            - name: apigw-config
              mountPath: /opt/softwareag/IntegrationServer/instances/default/packages/WmAPIGateway/resources/configuration
            - name: apigw-license
              mountPath: /opt/softwareag/IntegrationServer/instances/default/config/licenseKey.xml
              subPath:   licenseKey.xml
              readOnly:  false
            - name: apigw-config
              mountPath: /config/application.properties
              subPath:    application.properties
            {{- if .Values.extraVolumeMounts }}
            {{- if eq "string" (printf "%T" .Values.extraVolumeMounts) }}
              {{- tpl .Values.extraVolumeMounts . | nindent 12 }}              
            {{- else }}
              {{- toYaml .Values.extraVolumeMounts | nindent 12 }}
            {{- end }}
            {{- end }}                      
        {{- include "common.containers.extraContainers" . | nindent 8 }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      volumes:
      - name: apigw-config
        configMap:
          name: {{ include "common.names.fullname" . }}-config
          items:
          - key:  config-sources.yml
            path: config-sources.yml
          - key:  apigw-config.yml
            path: apigw-config.yml
          - key:  application.properties
            path: application.properties  
      - name: apigw-license
        configMap:
          name: {{ include "apigateway.licenseconfigname" . }}
          defaultMode: 0666
          items:
          - key: {{ default "licensekey" .Values.licenseConfigKey }}
            path: licenseKey.xml
      {{- if .Values.elasticsearch.tlsEnabled }}
      - name: elastic-tls
        secret: 
          secretName: {{ include "apigateway.elastictls" .}}
          items:
            - key: truststore.jks
              path: truststore.jks
            - key: keystore.jks
              path: keystore.jks
      {{- end }}
      {{- if .Values.extraVolumes }}
      {{- if eq "string" (printf "%T" .Values.extraVolumes) }}
        {{ tpl .Values.extraVolumes . | nindent 6 }}
      {{- else }}
        {{ toYaml .Values.extraVolumes | nindent 6 }}
      {{- end }}
      {{- end }}
