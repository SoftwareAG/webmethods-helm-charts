# /*
#  * Copyright (c) 2021 Software AG, Darmstadt, Germany and/or its licensors
#  *
#  * SPDX-License-Identifier: Apache-2.0
#  *
#  *   Licensed under the Apache License, Version 2.0 (the "License");
#  *   you may not use this file except in compliance with the License.
#  *   You may obtain a copy of the License at
#  *
#  *       http://www.apache.org/licenses/LICENSE-2.0
#  *
#  *   Unless required by applicable law or agreed to in writing, software
#  *   distributed under the License is distributed on an "AS IS" BASIS,
#  *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#  *   See the License for the specific language governing permissions and
#  *   limitations under the License.
#  *
#  */
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ include "common.names.fullname" . }}-tmc
  labels:
    app: tmc
    {{- include "common.labels.standard" . | nindent 4 }}
    {{- with .Values.extraLabels -}}
    {{ toYaml . | nindent 4 }}
    {{- end }}
spec:
  updateStrategy: 
    type: "OnDelete"
  replicas: 1
  selector:
    matchLabels:
      app: tmc
  serviceName: {{ include "common.names.fullname" . }}-tmc-service
  template:
    metadata:
      labels:
        app: tmc
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      securityContext:
        {{- toYaml .Values.securityContext | nindent 8 }}
      containers:
        - name: tmc-server
          image: "{{ $.Values.registry }}/{{ $.Values.tmcImage }}:{{ $.Values.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ $.Values.pullPolicy | quote }}
          startupProbe:
            {{- toYaml .Values.tmcServer.startupProbe | nindent 12 }}
          livenessProbe:
            {{- toYaml .Values.tmcServer.livenessProbe | nindent 12 }}
          readinessProbe:
            {{- toYaml .Values.tmcServer.readinessProbe | nindent 12 }}
          {{- if and .Values.resources .Values.resources.tmcContainer }}
          resources:
            {{- toYaml .Values.resources.tmcContainer | nindent 12 }}
          {{- end }}
          volumeMounts:
            - name: commonconfig-volume
              mountPath: /opt/softwareag/config
            - name: core-store
              mountPath: /opt/softwareag/.tc/mgmt
          env:
            {{- if eq $.Values.terracotta.security true }}
            {{- if eq $.Values.terracotta.selfSignedCerts true }}
            - name: JAVA_OPTS
              value: {{ $.Values.terracotta.tmcOpts }} -Djavax.net.ssl.keyStore=/opt/softwareag/.tc/mgmt/tmc-0-keystore.jks -Djavax.net.ssl.trustStore=/opt/softwareag/.tc/mgmt/truststore.jks
            {{- else }}
            - name: JAVA_OPTS
              value: {{ $.Values.terracotta.tmcOpts }} -Djavax.net.ssl.keyStore=/opt/softwareag/.tc/mgmt/tmc-0-keystore.jks
            {{- end }}
            {{- else }}
            {{- if ne $.Values.terracotta.tmcOpts "" }}
            - name: JAVA_OPTS
              value: {{ $.Values.terracotta.tmcOpts }}
            {{- end }}
            {{- end }}
            - name: JSON_LOGGING
              value: {{ $.Values.terracotta.jsonLogging | quote }}
      volumes:
        - name: commonconfig-volume
          projected:
            sources:
              - configMap:
                  name: {{ include "terracotta.licenseConfigMapName"  . }}
              {{- if eq $.Values.terracotta.security true }}
              - secret:
                  name: {{ required "A valid certs is required!" $.Values.terracotta.secretName }}
              {{- end }}
  volumeClaimTemplates:
    - metadata:
        name: core-store
      spec:
        accessModes: [ "ReadWriteOnce" ]
        resources:
          requests:
            storage: {{ required "A valid storage request is required!" $.Values.tmcStorage }}