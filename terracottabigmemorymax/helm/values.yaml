# -- The repository for the image. By default,
# this points to the Software AG container repository.
# Change this for air-gaped installations or custom images.
# For the Software AG container repository you need to have a
# valid access token stored as registry credentials
registry: sagcr.azurecr.io
serverImage: bigmemorymax-server
tmcImage: bigmemorymax-management-server
pullPolicy: IfNotPresent
# -- Specific version to not accidentally change production versions with newer images.
tag: "4.4.0"

# -- Image pull secret reference. By default looks for `regcred`.
imagePullSecrets:
  - name: regcred

#
# BELOW ARE THE CONFIGURATIONS FOR THE PODS
#

securityContext:
  runAsNonRoot: true
  runAsUser: 1724
  runAsGroup: 0
  fsGroup: 0

# -- Extra Labels
extraLabels: {}

# -- Exta environment properties to be passed on to the terracotta runtime
#  - name: extraEnvironmentVariable
#    value: "myvalue"
extraEnvs: []

# -- The pvc storage request for the server pods
serverStorage: 10Gi
# -- The pvc storage request for the tmc pods
tmcStorage: 1Gi

# -- Terracotta BigMemoryMax configurations
terracotta:

  # -- The number of Terracotta stripes to deploy.
  stripeCount: 1
  # -- The number of Terracotta servers per stripe.
  nodeCountPerStripe: 2
  # -- The <datastoreSize> configuration for each Terracotta server.
  datastoreSize: "4G"
  # -- The <offheap> configuration for each Terracotta server.
  offHeapSize: "2G"
  # -- The <restartable> configuration for each Terracotta server.
  restartable: false
  # -- The JSON_LOGGING environment variable for each Terracotta server.
  jsonLogging: true
  # -- Can be used for passing some jvm related options for terracotta servers.
  serverOpts: ""
  # -- Add the <security> configuration for each Terracotta server. Requires secretName to be set.
  security: false
  # -- Configure JAVA_OPTS appropriately when using self-signed certificates.
  selfSignedCerts: true
  # -- Create a secret manually in cluster which contains all the necessary certs, files etc. for all the servers as well as tmc as the same secret will be mounted to all the pods deployed via this helm chart.
  secretName: ""
  # -- TSA port
  tsaPort: 9510
  # -- TSA group port
  tsaGroupPort: 9530
  # -- TSA Management port
  tsaManagementPort: 9540
  # -- TMC Enabled or not
  tmcEnabled: true
  # -- TMC Secure Port
  tmcSecurePort: 9443
  # -- TMC Management Port
  tmcManagementPort: 9889
  # -- Can be used for passing some jvm related options for tmc.
  tmcOpts: "-Dcom.tc.management.config.disable.csrfGuard=true"
  # -- The license content for the Terracotta cluster. Optional.
  license: ""
  # -- ingress class to be used 
  ingressClass: "nginx"
  # -- secret to secure the ingress
  ingressSecretName: ""
  # -- Ingress secured or not
  secureIngress: false 
  # -- hostname which is accessed publicly on browser to reach tmc.
  ingressHostname: ""

# -- TSA container-specific configurations for probes
tsaServer:
  # -- Configure startup probe
  startupProbe:
    tcpSocket:
      port: 9530
    initialDelaySeconds: 10
    periodSeconds: 5
    successThreshold: 1
    timeoutSeconds: 5
    failureThreshold: 3

  # -- Configure readiness probe
  readinessProbe:
    tcpSocket:
      port: 9530
    initialDelaySeconds: 30
    periodSeconds: 30
    successThreshold: 1
    timeoutSeconds: 5
    failureThreshold: 3 

  # -- Configure liveness probe
  livenessProbe:
    tcpSocket:
      port: 9530
    initialDelaySeconds: 30
    periodSeconds: 30
    successThreshold: 1
    timeoutSeconds: 5
    failureThreshold: 3 

# -- TMC-specific configurations for probes
tmcServer:
  # -- Configure startup probe
  startupProbe:
    tcpSocket:
      port: 9889
    initialDelaySeconds: 10
    periodSeconds: 30
    successThreshold: 1
    timeoutSeconds: 5
    failureThreshold: 3

  # -- Configure readiness probe
  readinessProbe:
    tcpSocket:
      port: 9889
    initialDelaySeconds: 20
    periodSeconds: 30
    successThreshold: 1
    timeoutSeconds: 5
    failureThreshold: 3

  # -- Configure liveness probe
  livenessProbe:
    tcpSocket:
      port: 9889
    initialDelaySeconds: 20
    periodSeconds: 30
    successThreshold: 1
    timeoutSeconds: 5
    failureThreshold: 3

# -- Define values for Prometheus Operator to scrap metrics via ServiceMonitor.
prometheus:
  path: "/tmc/api/prometheus"
  interval: 10s
  scrapeTimeout: 10s
  
# -- Create and enable ServiceMonitor. The default is `false`.
serviceMonitor:
  enabled: false
  
# -- We usually recommend not to specify default resources and to leave this as a conscious
# choice for the user. This also increases chances charts run on environments with little
# resources, such as Minikube. If you do want to specify resources, uncomment the following
# lines, adjust them as necessary, and remove the curly braces after 'resources:'.
#
# tsaContainer:
#   limits:
#     cpu: 100m
#     memory: 128Mi
#   requests:
#     cpu: 100m
#     memory: 128Mi
# tmcContainer:
#   requests:
#     cpu: 500m
#     memory: 2Gi
#   limits:
#     # use a high cpu limit to avoid the container being throttled
#     cpu: 8
#     memory: 4Gi
resources: {}
