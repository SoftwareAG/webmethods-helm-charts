# /*
#  * Copyright (c) 2023 Software AG, Darmstadt, Germany and/or its licensors
#  *
#  * SPDX-License-Identifier: Apache-2.0
#  *
#  *   Licensed under the Apache License, Version 2.0 (the "License");
#  *   you may not use this file except in compliance with the License.
#  *   You may obtain a copy of the License at
#  *
#  *       http://www.apache.org/licenses/LICENSE-2.0
#  *
#  *   Unless required by applicable law or agreed to in writing, software
#  *   distributed under the License is distributed on an "AS IS" BASIS,
#  *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#  *   See the License for the specific language governing permissions and
#  *   limitations under the License.
#  *
#  */

apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ include "common.names.fullname" . }}
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "common.labels.standard" . | nindent 4 }}
    {{- with .Values.extraLabels -}}
    {{ toYaml . | nindent 4 }}
    {{- end }}
spec:
  replicas: {{ .Values.replicaCount }}
  serviceName: {{ include "common.names.fullname" . }}
  selector:
    matchLabels:
      {{- include "common.labels.matchLabels" . | nindent 6 }}
  template:
    metadata:
      annotations:
        {{- with .Values.podAnnotations }}
          {{- toYaml . | nindent 8 }}
        {{- end }}
        {{- include "common.prometheus.annotations" (dict "port" .Values.service.metricPort) | nindent 8 }}
      labels:
        {{- include "common.labels.matchLabels" . | nindent 8 }}
        {{- with .Values.extraLabels -}}
        {{ toYaml . | nindent 8 }}
        {{- end }}
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ .Values.serviceAccountName }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      volumes:
        - name: licence-xml
          configMap:
            name: {{ .Values.licenseConfigMap }}            
            defaultMode: 420
            items:
            - key:  licensekey
              path: licenseKey.xml
        - name: jmx-exporter-config
          configMap:
            name: {{ include "common.names.fullname" . }}
            defaultMode: 420
            items:
            - key:  jmx_exporter.yaml
              path: jmx_sag_um_exporter.yaml
        - name: custom-server-common
          configMap:
            name: {{ include "common.names.fullname" . }}
            defaultMode: 420
            items:
            - key:  Custom_Server_Common.conf
              path: Custom_Server_Common.conf
        {{- if .Values.extraVolumes }}
        {{- if eq "string" (printf "%T" .Values.extraVolumes) }}
          {{ tpl .Values.extraVolumes . | nindent 8 }}
        {{- else }}
          {{ toYaml .Values.extraVolumes | nindent 8 }}
        {{- end }}
        {{- end }}
      initContainers:
        {{- toYaml .Values.extraInitContainers | nindent 8 }}            
      containers:
        - name: {{ .Chart.Name }}
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          {{ if .Values.image.tag  }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          {{- else -}}
          image: "{{ .Values.image.repository }}:{{ .Chart.AppVersion }}"
          {{- end }}
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          ports:
            - name: nsp
              containerPort: 9000
              protocol: TCP
            - containerPort: 9200
              protocol: TCP              
          volumeMounts:
          - name: data
            mountPath: /opt/softwareag/UniversalMessaging/server/umserver/data
          - name: logs
            mountPath: /opt/softwareag/UniversalMessaging/server/umserver/logs
          - name: configuration
            mountPath: /opt/softwareag/common/conf
          - name: licence-xml
            mountPath: /opt/softwareag/UniversalMessaging/server/umserver/licence/licence.xml
            subPath:   licence.xml
          - name: jmx-exporter-config
            mountPath: /opt/softwareag/UniversalMessaging/server/umserver/bin/jmx_sag_um_exporter.yaml
            subPath:   jmx_sag_um_exporter.yaml
            readOnly:  true
          - name: custom-server-common
            mountPath: /opt/softwareag/UniversalMessaging/server/umserver/bin/Custom_Server_Common.conf
            subPath:   Custom_Server_Common.conf
            readOnly:  true
          {{- if .Values.extraVolumeMounts }}
          {{- if eq "string" (printf "%T" .Values.extraVolumeMounts) }}
            {{- tpl .Values.extraVolumeMounts . | nindent 12 }}              
          {{- else }}
            {{- toYaml .Values.extraVolumeMounts | nindent 12 }}
          {{- end }}
          {{- end }}            
          env:
          {{- if .Values.um.realmName }}
          - name: REALM_NAME
            value: {{ .Values.um.realmName | quote }}
          {{- else }}
          - name: REALM_NAME
            valueFrom:
              fieldRef:
                fieldPath: metadata.name
          {{- end }}
          - name: INIT_JAVA_MEM_SIZE
            value: {{ .Values.um.initJavaMemSize | quote }}
          - name: MAX_JAVA_MEM_SIZE
            value: {{ .Values.um.maxJavaMemSize | quote }}
          - name: MAX_DIRECT_MEM_SIZE
            value: {{ .Values.um.maxDirectMemSize | quote }}
          - name: BASIC_AUTH_ENABLE
            value: {{ .Values.um.basicAuthEnable | quote }}
          - name: BASIC_AUTH_MANDATORY
            value: {{ .Values.um.basicAuthMandatory | quote }}
          - name: STARTUP_COMMAND
            value: {{ tpl .Values.um.startupCommand . | quote }}
          - name: LOG_FRAMEWORK
            value: {{ .Values.um.logFramework | quote }}
          {{- if .Values.extraEnvs }}
          {{- range $key, $val := .Values.extraEnvs }}
          - name: {{ $key }}
            value: {{ $val }}
          {{- end }}
          {{- end }}
          {{- if .Values.lifecycle }}
          lifecycle:
          {{ toYaml .Values.lifecycle | indent 10 }}
          {{- end }}          
          startupProbe:
            {{- toYaml .Values.startupProbe | nindent 12 }}
          livenessProbe:
            {{- toYaml .Values.livenessProbe | nindent 12 }}
          readinessProbe:
            {{- toYaml .Values.readinessProbe | nindent 12 }}
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
    {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
    {{- end }}
    {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
    {{- end }}
  volumeClaimTemplates:
  - metadata:
      name: data
    spec:
      accessModes:
      - ReadWriteOnce
      resources:
        requests:
          storage: {{ .Values.storage.dataSize }}
  - metadata:
      name: logs
    spec:
      accessModes:
      - ReadWriteOnce
      resources:
        requests:
          storage: {{ .Values.storage.logsSize }}
  - metadata:
      name: configuration
    spec:
      accessModes:
      - ReadWriteOnce
      resources:
        requests:
          storage: {{ .Values.storage.configurationSize }}